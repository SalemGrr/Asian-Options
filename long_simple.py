# -*- coding: utf-8 -*-
"""Long_Simple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dmXNKbeN98lyhTou3FxbkQzTnE8WqDb
"""

pip install pandas_ta

pip install yfinance

import pandas as pd
import yfinance as yf

dfSPY=yf.download("AMZN",start='2011-01-05', end='2021-01-05')

dfSPY=dfSPY[dfSPY.High!=dfSPY.Low]
dfSPY.reset_index(inplace=True)
dfSPY.head()

import pandas_ta as ta
dfSPY['EMA']=ta.ema(dfSPY.Close, length=200)
dfSPY['RSI']=ta.rsi(dfSPY.Close, length=2)
a=ta.adx(dfSPY.High, dfSPY.Low, dfSPY.Close, length=14)
dfSPY=dfSPY.join(a.ADX_14)

dfSPY.dropna(inplace=True)
dfSPY.reset_index(inplace=True)
dfSPY[420:425]

def addemasignal(df, backcandles):
    emasignal = [0]*len(df)
    for row in range(backcandles, len(df)):
        upt = 1
        dnt = 1
        for i in range(row-backcandles, row+1):
            if df.High[i]>=df.EMA[i]:
                dnt=0
            if df.Low[i]<=df.EMA[i]:
                upt=0
        if upt==1 and dnt==1:
            #print("!!!!! check trend loop !!!!")
            emasignal[row]=3
        elif upt==1:
            emasignal[row]=2
        elif dnt==1:
            emasignal[row]=1
    df['EMASignal'] = emasignal

addemasignal(dfSPY,6)

def totalSignal(df, ADX):
    ordersignal=[0]*len(df)
    for i in range(0, len(df)):
        if  df.RSI[i]<=25 and ADX[i]>=20 and df.EMASignal[i]==2:
            ordersignal[i]=2
    df['ordersignal']=ordersignal

totalSignal(dfSPY, dfSPY.ADX_14)

#dfSPY[dfSPY.ordersignal!=0]

import numpy as np
def pointpos(x):
    if x['ordersignal']==1:
        return x['High']+2e-3
    elif x['ordersignal']==2:
        return x['Low']-2e-3
    else:
        return np.nan

dfSPY['pointpos'] = dfSPY.apply(lambda row: pointpos(row), axis=1)

import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime

dfpl = dfSPY[1000:3200].copy()
fig = go.Figure(data=[go.Candlestick(x=dfpl.index,
                open=dfpl['Open'],
                high=dfpl['High'],
                low=dfpl['Low'],
                close=dfpl['Close']),
                go.Scatter(x=dfpl.index, y=dfpl.EMA, line=dict(color='orange', width=2), name="EMA")])

fig.add_scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                marker=dict(size=6, color="MediumPurple"),
                name="Signal")
fig.update_xaxes(rangeslider_visible=False)
fig.update_layout(autosize=False, width=600, height=600,margin=dict(l=50,r=50,b=100,t=100,pad=4), paper_bgcolor="white")
fig.show()